package com.pmarlen.caja.view;

import com.pmarlen.backend.model.Producto;
import com.pmarlen.caja.model.PedidoVentaDetalleTableItem;
import com.pmarlen.model.Constants;
import java.awt.Color;
import java.awt.Component;
import java.text.DecimalFormat;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.border.LineBorder;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author alfredo
 */
public class ProductoCellRender extends javax.swing.JPanel implements TableCellRenderer {
	private static DecimalFormat df = new DecimalFormat("$ ###,###,##0.00");
	private Color bgc;
	private Color fgc;
	private Color sbgc; 
	private Color sfgc;
	
	private Color princColorSel;
	private Color princColorNot;
	private Color oprtColorSel;
	private Color oprtColorNot;
	private Color regaColorSel;
	private Color regaColorNot;
			

	public void setColors(Color bgc, Color fgc, Color sbgc, Color sfgc) {
		this.bgc = bgc;
		this.fgc = fgc;
		this.sbgc = sbgc;
		this.sfgc = sfgc;		
	}

	public ProductoCellRender(Color princColorSel, Color princColorNot, Color oprtColorSel, Color oprtColorNot,Color regaColorSel,Color regaColorNot) {
		this.princColorSel = princColorSel;
		this.princColorNot = princColorNot;
		this.oprtColorSel  = oprtColorSel;
		this.oprtColorNot  = oprtColorNot;
		this.regaColorSel  = regaColorSel;
		this.regaColorNot  = regaColorNot;
	}
	
	
		
	/**
	 * Creates new form ProductoCellRender
	 */
	public ProductoCellRender() {
		this.regaColorNot  = new Color(0xFFE2D2);
		this.princColorNot = new Color(0xE1EFFF);
		this.oprtColorNot  = new Color(0xE9FFDE);
		
		this.regaColorSel  = new Color(0xFF9457);
		this.princColorSel = new Color(0x61A5F6);
		this.oprtColorSel  = new Color(0x8CFB56);
		
		
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nombreLabel = new javax.swing.JLabel();
        descripcionLabel = new javax.swing.JLabel();
        precioLabel = new javax.swing.JLabel();
        codigoBarrasLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(150, 30));
        setPreferredSize(new java.awt.Dimension(217, 60));
        setLayout(new java.awt.BorderLayout());

        nombreLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        nombreLabel.setText("NOMBRE");
        add(nombreLabel, java.awt.BorderLayout.CENTER);

        descripcionLabel.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        descripcionLabel.setText("PRESENTACIÃ“N");
        add(descripcionLabel, java.awt.BorderLayout.SOUTH);

        precioLabel.setText("CONTENIDO");
        add(precioLabel, java.awt.BorderLayout.EAST);

        codigoBarrasLabel.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        codigoBarrasLabel.setText("|| || | | ||| | |||| ||||| || |");
        add(codigoBarrasLabel, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel codigoBarrasLabel;
    private javax.swing.JLabel descripcionLabel;
    private javax.swing.JLabel nombreLabel;
    private javax.swing.JLabel precioLabel;
    // End of variables declaration//GEN-END:variables

	@Override
	public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		ProductoCellRender pcr= new ProductoCellRender();
		
		PedidoVentaDetalleTableItem dvti = (PedidoVentaDetalleTableItem)value;
		if(dvti != null){
			Producto productoInCell=dvti.getProducto();
			if(productoInCell != null){

				pcr.codigoBarrasLabel.setText(productoInCell.getCodigoBarras().toUpperCase());		
				pcr.nombreLabel.setText(productoInCell.getNombre().toUpperCase());		
				pcr.descripcionLabel.setText(productoInCell.getPresentacion().toUpperCase());
				pcr.precioLabel.setText(productoInCell.getContenido()+productoInCell.getUnidadMedida());

				if(isSelected){
					if(dvti.getTipoAlmacen() == Constants.ALMACEN_PRINCIPAL){
						pcr.codigoBarrasLabel.setText("["+productoInCell.getCodigoBarras().toUpperCase()+"] 1RA LINEA");
						pcr.setBackground(princColorSel);
						pcr.setForeground(fgc);
					} else if(dvti.getTipoAlmacen() == Constants.ALMACEN_OPORTUNIDAD){
						pcr.codigoBarrasLabel.setText("("+productoInCell.getCodigoBarras().toUpperCase()+") OPORTUNIDAD");
						pcr.setBackground(oprtColorSel);
						pcr.setForeground(fgc);
					} else if(dvti.getTipoAlmacen() == Constants.ALMACEN_REGALIAS){
						pcr.codigoBarrasLabel.setText("{"+productoInCell.getCodigoBarras().toUpperCase()+"} REGALIAS");
						pcr.setBackground(regaColorSel);
						pcr.setForeground(fgc);
					}
				} else {
					if(dvti.getTipoAlmacen() == Constants.ALMACEN_PRINCIPAL){
						pcr.codigoBarrasLabel.setText("["+productoInCell.getCodigoBarras().toUpperCase()+"] 1RA LINEA");
						pcr.setBackground(princColorNot);
						pcr.setForeground(fgc);
					} else if(dvti.getTipoAlmacen() == Constants.ALMACEN_OPORTUNIDAD){
						pcr.codigoBarrasLabel.setText("("+productoInCell.getCodigoBarras().toUpperCase()+") OPORTUNIDAD");
						pcr.setBackground(oprtColorNot);
						pcr.setForeground(fgc);
					} else if(dvti.getTipoAlmacen() == Constants.ALMACEN_REGALIAS){
						pcr.codigoBarrasLabel.setText("{"+productoInCell.getCodigoBarras().toUpperCase()+"} REGALIAS");
						pcr.setBackground(regaColorNot);
						pcr.setForeground(fgc);
					}
				}
			}
		} else {
			pcr.codigoBarrasLabel.setText("[NULL]");		
			pcr.nombreLabel.setText("N U L L");		
			pcr.descripcionLabel.setText("-NULL-");
			pcr.precioLabel.setText("$ NULL");

		}
		if(hasFocus){			
			pcr.setBorder(new LineBorder(sbgc!=null?sbgc:Color.MAGENTA, 1, false));
		}
		
		return pcr;
	}
}
