
package com.pmarlen.digifactws.production;

import java.net.MalformedURLException;
import java.net.URL;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import org.apache.log4j.Logger;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "CFD", targetNamespace = "https://cfd.sicofi.com.mx", wsdlLocation = "https://cfd.sicofi.com.mx/sicofiWSv2/cfd.asmx?WSDL")
public class CFD
    extends Service
{

    private final static URL CFD_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(CFD.class.getName());

    static {
		trustAllHttps();
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = com.pmarlen.digifactws.production.CFD.class.getResource(".");
            url = new URL(baseUrl, "https://cfd.sicofi.com.mx/sicofiWSv2/cfd.asmx?WSDL");
        } catch (MalformedURLException e) {
            logger.warn("Failed to create URL for the wsdl Location: 'https://cfd.sicofi.com.mx/sicofiWSv2/cfd.asmx?WSDL', retrying as a local file");
            logger.warn(e.getMessage());
        }
        CFD_WSDL_LOCATION = url;
    }

	private static void trustAllHttps() {
		try {
			logger.info("------------trustAllHttps----------BEGIN");
			SSLContext ctx = SSLContext.getInstance("SSL");
			ctx.init(new KeyManager[0], new TrustManager[] {new DefaultTrustManager()}, new SecureRandom());
			SSLContext.setDefault(ctx);
			 // Create all-trusting host name verifier
			HostnameVerifier allHostsValid = new HostnameVerifier() {
				public boolean verify(String hostname, SSLSession session) {
				  return true;
				}
			};
			// Install the all-trusting host verifier
			HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
			logger.info("------------trustAllHttps----------END");
		}catch(Exception ex){
			logger.error("trustAllThhps:", ex);
		}
	}

    public CFD(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CFD() {
        super(CFD_WSDL_LOCATION, new QName("https://cfd.sicofi.com.mx", "CFD"));
    }

    /**
     * 
     * @return
     *     returns CFDSoap
     */
    @WebEndpoint(name = "CFDSoap")
    public CFDSoap getCFDSoap() {
        return super.getPort(new QName("https://cfd.sicofi.com.mx", "CFDSoap"), CFDSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CFDSoap
     */
    @WebEndpoint(name = "CFDSoap")
    public CFDSoap getCFDSoap(WebServiceFeature... features) {
        return super.getPort(new QName("https://cfd.sicofi.com.mx", "CFDSoap"), CFDSoap.class, features);
    }
	
		private static class DefaultTrustManager implements X509TrustManager {

        @Override
        public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}

        @Override
        public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}

        @Override
        public X509Certificate[] getAcceptedIssuers() {
            return null;
        }
    }

}
